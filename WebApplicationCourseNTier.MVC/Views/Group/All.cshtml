@model WebApplicationCourseNTier.DataAccess.Models.PaginationResponse<WebApplicationCourseNTier.Business.DTOs.GroupDTOs.GetGroupDto>

@{
    ViewData["Title"] = "All Groups";
    var paginationRequest = ViewData["PaginationRequest"] as WebApplicationCourseNTier.DataAccess.Models.PaginationRequest;
    var paginationResponse = ViewData["PaginationResponse"] as WebApplicationCourseNTier.DataAccess.Models.PaginationResponse<WebApplicationCourseNTier.Business.DTOs.GroupDTOs.GetGroupDto>;
}

<div class="container mt-5">
    <h2 class="text-center mb-4">All Groups</h2>

    <!-- Create Group Button -->
    <div class="d-flex justify-content-start mb-4">
        <a href="@Url.Action("Create", "Group")" class="btn btn-success btn-lg text-white font-weight-bold">
            <i class="fas fa-plus-circle"></i> Create New Group
        </a>
    </div>

    <!-- Groups Table -->
    <div class="table-responsive">
        <table class="table table-striped table-bordered table-hover">
            <thead class="table-dark">
                <tr>
                    <th scope="col" class="bg-primary text-white">Id</th>
                    <th scope="col">Name</th>

                    <th scope="col">Teacher Name</th>
                   
                    <th scope="col">Subject Name</th>
                   
                    <th scope="col">Student Count</th>
                    <th scope="col">Lessons</th>
                    <th scope="col">Lesson Count</th>
                    <th scope="col" class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model?.Data?.Any() == true)
                {
                    foreach (var group in Model.Data)
                    {
                        <tr>
                            <td class="bg-primary text-white">@group.Id</td>
                            <td>@group.Name</td>
                        
                            <td>@group.TeacherName</td>
                         
                            <td>@group.SubjectName</td>

                         
                            <td>@group.StudentNames?.Count()</td>

                            <td>
                                @string.Join(", ", group.LessonNames)
                            </td>

                            <td>@group.LessonNames?.Count()</td>

                            <td class="text-center">
                                <div class="d-flex justify-content-center">
                                    <!-- Edit Button -->
                                    <a class="btn btn-warning btn-sm text-white mx-2" asp-controller="Group" asp-action="Edit" asp-route-id="@group.Id">
                                        <i class="fas fa-edit"></i> Edit
                                    </a>
                                    <!-- Delete Button -->
                                    <a class="btn btn-danger btn-sm text-white mx-2" asp-controller="Group" asp-action="Delete" asp-route-id="@group.Id" onclick="return confirm('Are you sure you want to delete this group?');">
                                        <i class="fas fa-trash-alt"></i> Delete
                                    </a>
                                    <!-- Details Button -->
                                    <a class="btn btn-info btn-sm text-white mx-2" asp-controller="Group" asp-action="Details" asp-route-id="@group.Id">
                                        <i class="fas fa-info-circle"></i> Details
                                    </a>
                                </div>
                            </td>

                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="11" class="text-center">No groups found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between">
        <div>
            @if (paginationRequest != null && paginationResponse != null)
            {
                <strong>Page @paginationRequest.PageNumber of @Math.Ceiling((double)(paginationResponse.TotalCount) / paginationRequest.PageSize)</strong>
            }
        </div>

        <div>
            <ul class="pagination">
                <!-- Previous button, only shown if the current page is greater than 1 -->
                @if (paginationRequest?.PageNumber > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("All", "Group", new { pageNumber = paginationRequest.PageNumber - 1, pageSize = paginationRequest.PageSize })">Previous</a>
                    </li>
                }

                <!-- Page number buttons -->
                @for (int i = 1; i <= Math.Ceiling((double)(paginationResponse?.TotalCount ?? 0) / (paginationRequest?.PageSize ?? 10)); i++)
                {
                    <li class="page-item @(i == paginationRequest?.PageNumber ? "active" : "")">
                        <a class="page-link" href="@Url.Action("All", "Group", new { pageNumber = i, pageSize = paginationRequest?.PageSize })">@i</a>
                    </li>
                }

                <!-- Next button, only shown if the current page is less than the total number of pages -->
                @if (paginationRequest?.PageNumber < Math.Ceiling((double)(paginationResponse?.TotalCount ?? 0) / (paginationRequest?.PageSize ?? 10)))
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("All", "Group", new { pageNumber = paginationRequest.PageNumber + 1, pageSize = paginationRequest.PageSize })">Next</a>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>
